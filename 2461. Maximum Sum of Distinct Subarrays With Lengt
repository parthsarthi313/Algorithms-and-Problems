2461. Maximum Sum of Distinct Subarrays With Length K

class Solution {
public:
    long long maximumSubarraySum(vector<int>& nums, int k) {
        long long sum = 0,ans = 0;
        int n = nums.size();
        int left = 0,right = 0;
        map<int,int> currnums;
        while(right < k) {
            sum += nums[right];
            currnums[nums[right]]++;
            right++;
        }
        if(currnums.size() == k) ans = max(ans,sum);
        while(right < n) {
            sum += nums[right] - nums[left];
            currnums[nums[right]]++;
            currnums[nums[left]]--;
            if(currnums[nums[left]] == 0) currnums.erase(nums[left]);
            left++,right++;
            if(currnums.size() == k) ans = max(ans,sum);
        }
        return ans;
    }
};