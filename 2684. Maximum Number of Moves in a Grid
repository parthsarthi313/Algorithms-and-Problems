2684. Maximum Number of Moves in a Grid

class Solution {
public:
    vector<vector<int>> dp;
    int solve(vector<vector<int>>& grid, int row, int col) {
        if (dp[row][col] != -1) {
            return dp[row][col];
        }
        dp[row][col] = 0;
        if (row - 1 >= 0 && col + 1 < grid[0].size() &&
            grid[row][col] < grid[row - 1][col + 1]) {
            dp[row][col] = max(dp[row][col], 1 + solve(grid, row - 1, col + 1));
        }
        if (col + 1 < grid[0].size() && grid[row][col] < grid[row][col + 1]) {
            dp[row][col] = max(dp[row][col], 1 + solve(grid, row, col + 1));
        }
        if (row + 1 < grid.size() && col + 1 < grid[0].size() &&
            grid[row][col] < grid[row + 1][col + 1]) {
            dp[row][col] = max(dp[row][col], 1 + solve(grid, row + 1, col + 1));
        }
        return dp[row][col];
    }
    int maxMoves(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        dp.assign(n+1,vector<int>(m+1,-1));
        int ans = -1;
        for (int i = 0; i < n; i++) {
            ans = max(ans, solve(grid, i, 0));
        }
        return ans;
    }
};