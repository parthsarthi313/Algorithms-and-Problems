2070. Most Beautiful Item for Each Query

class Compare{
    public:
    bool operator()(vector<int> v1,vector<int> v2){
        if(v1[0] == v2[0]) return v1[1] > v2[1];
        return v1[0] < v2[0];
    }
};
class Solution {
public:
    vector<int> maximumBeauty(vector<vector<int>>& items, vector<int>& queries) {
        sort(items.begin(),items.end(),Compare());
        int n = items.size();
        vector<int> v1(n),v2(n);
        int maxm = -1;
        for(int i =0;i<n;i++){
            v1[i] = items[i][0];
            v2[i] = max(maxm,items[i][1]);
            maxm = max(maxm, items[i][1]);
        }
        int m = queries.size();
        vector<int> ans(m);
        for(int i =0;i<m;i++){
            int price = queries[i];
            auto lb = lower_bound(v1.begin(),v1.end(),price);
            if(lb != v1.end()){
                int ind = lb - v1.begin();
                if(v1[ind] == price) ans[i] = v2[ind];
                else{
                    ind--;
                    if(ind < 0) ans[i] = 0;
                    else ans[i] = v2[ind];
                }
            }
            else{
                ans[i] = maxm;
            }
        }
        return ans;
    }
};